## Linux Performance Monitoring and Tuning
# Commands ran within a VBox Mint Linux VM or the Win10 Dev Ubuntu Bash

## Diagnosing and Managing CPU Load and Memory Issues

## Module Introduction
cd /proc/
less cpuinfo
less cpuinfo | grep processor

## Assessing Memory Usage
# Memory Types
# Physical Memory - Random Access Memory (RAM)
# SWAP - Allocated disk space
# Disk Caching - RAM capacity "borrowed" for application use
less /proc/meminfo
free -h # compare free to available
vmstat
vmstat 1 4  # 4x 1second intervals

## Controlling Process Access to Resources
# Deprecated Process - No longer fits business needs
# Orphaned Application - Old experiment
# Unauthorized Malware
kill  # Terminates processes based on process ID
killall  # Terminates processes based on application name

yes > /dev/null &  # will run a process in the background
yes > /dev/null &
yes > /dev/null &
ps
 PID TTY        TIME CMD
3133 pts/2  00:00:00 bash
4410 pts/2  00:00:02 yes
4411 pts/2  00:00:01 yes
4412 pts/2  00:00:00 yes
4413 pts/2  00:00:02 ps

kill 4410
# or use
killall yes

# see http://cheat.sh/systemctl
systemctl list-units | grep running
systemctl status {service}
systemctl disable {service}

## Controlling Processes Using NICE
# Balancing Process Needs

# add this file
- stresser.sh
    #!/bin/bash
    # stress CPU
    while true; do true; done

chmod +x stresser.sh
./stresser.sh
TOP  # On another console (tmux) will show the CPU running stresser.sh nearly up to 100%
CTRL+C

cp stresser.sh stresser1.sh
./stresser.sh &
./stresser1.sh
TOP  # On another console (tmux) will show the CPU running stresser.sh & stresser1.sh nearly up to 50% each
CTRL+C

# now run :
nice -19 ./stresser1.sh &
TOP # will show ./stresser1.sh running the CPU around only 2% for this process
    # and stresser.sh back up to 98% CPU

killall stress*  # will terminate both processes

## Controlling Processes Using cgroups
# managing CPU Usage
apt install cgroup-bin cgroup-lite cgroup-tools cgroupfs-mount libcgroup1
# or yum install libcgroup libcgroup-tools

sudo su
cgcreate -a robq -g cpu:testgroup
cd /sys/fs/cgroup/cpu
cat cpu.cfs_period_us
cat cpu.cfs_quota_us
cd testgroup
cat cpu.cfs_quota_us
-1
cgset -r cpu.cfs_quota_us=25000 testgroup
cat cpu.cfs_quota_us
25000  # 25% of the value of the cpu.cfs_period_us file
cd /home/robq
cgexec -g cpu:testgroup ./stresser.sh &
top # will show stresser.sh at 25% CPU

cd /sys/fs/cgroup/memory
ls
cat memory.limit_in_bytes
9223372036854771712

cgcreate -a robq -g memory:limitmemusage
cgset -r memory.limit_in_bytes=512m limitmemusage
cgexec -g memory:limitmemusage /opt/google/chrome/chrome
# chrome exe found using : ps aux | grep -i chrome

# or place this configuration into a bash script i.e.
vim cgroup-script.sh

#!/bin/bash
cgcreate -a robq -g cpu:testgroup
cgset -r cpu.cfs_quota_us=25000 testgroup
cgcreate -a robq -g memory:limitmemusage
cgset -r memory.limit_in_bytes=512m limitmemusage

# :wq
chmod +x cgroup-script.sh
# add this entry to the /etc/anacrontab
1       2       /home/robq/cgroup-script.sh

# Summary : 
# Measure CPU and Memory status
    - proc pseudo system
    - uptime
    - top
    - free
    - vmstat
- Interpret metrics
- Stop processes
    - kill
    - killall
- Control processes
    - nice
    - cgroups
